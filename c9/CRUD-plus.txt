urls.py
from django.contrib import admin
from django.urls import path
from . import views

app_name = 'posts'

urlpatterns = [
    path('github/<str:username>', views.github, name='github'),
    path('naver/<str:q>', views.naver, name='naver'),
    path('', views.index, name='list'),
    path('create/', views.create, name='create'),
    path('new/', views.new, name='new'),
    path('<int:post_id>/', views.detail, name='detail'),
    path('<int:post_id>/delete/', views.delete, name='delete'),
    path('<int:post_id>/edit/', views.edit, name='edit'),
    path('<int:post_id>/update/', views.update, name='update'),
    
]


index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <h1>
        Post Index
    </h1>
    <a href="{% url 'posts:new' %}">New</a>
    <ul>
    {% for post in posts %}
        <li><a href="{% url 'posts:detail' post.pk %}">{{ post.title }}</a></li>
    {% endfor %}
    </ul>
</body>
</html>

views.py
from django.shortcuts import render, redirect
from .models import Post
# Create your views here.
# views.py >> urls.py >> template.py
# def throw
# def catch

def index(request):
    return render(request,'index.html')

# Form tag
def new(request):
    return render(request, 'new.html')
    
def create(request):
    title = request.POST.get('title')
    content = request.POST.get('content')
    # DB INSERT 
    post = Post(title=title, content=content)
    post.save()
    # 렌더는 GET에만 사용한다.
    # return render(request, 'create.html')
    # POST는 리 다이렉트를 사용한다 위에 임포트 해줘야 된다.
    return redirect('posts:detail', post.pk)
    # 외부 사이트로도 리다이렉트 가능함
# def rd(request, 변수):
def naver(request, q):
    return redirect(f'https://search.naver.com/search.naver?query={q}')
    
    # https://playground-busanteam.c9users.io/posts/naver/검색\
    # 깃헙처럼 id값이 주소창에 입력 되는 경우
def github(request, username):
    return redirect(f'https://github.com/{username}')

def index(request):
    # All Post
    posts = Post.objects.all()
    
    return render(request, 'index.html', {'posts':posts})
    
def detail(request, post_id):
    post = Post.objects.get(pk=post_id)
    return render(request, 'detail.html', {'post': post})
    
def delete(request, post_id):
    # 삭제하는 코드
    post = Post.objects.get(pk=post_id)
    post.delete()
    return redirect('posts:list')

def edit(request, post_id):
    post = Post.objects.get(pk=post_id)
    return render(request, 'edit.html', {'post':post})

def update(request, post_id):
    # 수정하는 코드
    # 수정하기 위해 수정 할 것을 불러온다
    post = Post.objects.get(pk=post_id)
    post.title = request.POST.get('title')
    post.content = request.POST.get('content')
    # 실제로 반영하기위해선 세이브를 해주어야 한다
    post.save()
    
    return redirect('posts:detail', post.pk)
    
    
    
    
    
    
    

new.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <!-- 장고는 슬레쉬 꼭 넣어주어야 한다 <form action="/posts/create/" method="post"> -->
    <form action="{% url 'posts:create' %}" method="post"> 
    <!-- post를 사용하면 보안상 장점이 있음 주소창에 세부 내용이 안뜸 {% csrf_token %} 도 같이 써야 하는데 보안상의 목적으로 사용함,
    다른 사이트에서 우리 사이트에 글을 작성하는 것을 막음, 피아식별 가능하게 함 -->
        {% csrf_token %}
        <input type="text" name="title"/>
        <input type="text" name="content"/>
        <input type="submit" value="Submit"/>
    </form>
</body>
</html>

detail.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <h1>
        Post Detail
    </h1>
    <h2>Title : {{ post.title }}</h2>
    <p>Content : {{ post.content }}</p>
    <a href="{% url 'posts:list' %}">List</a>
    <a href="{% url 'posts:edit' post.pk %}">Edit</a>
    <a href="{% url 'posts:delete' post.pk %}">Delete</a>
</body>
</html>

edit.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <h1>Post Edit</h1>
    <form action="{% url 'posts:update' post.pk %}" method="post">
        <!-- 포스트 요청을 하여 추가해주는 것! -->
        {% csrf_token %}
        <input type="text" name="title" value="{{ post.title }}"/>
        <input type="text" name="content" value="{{ post.content }}"/>
        <input type="submit" value="Submit"/>
    </form>
</body>
</html>

댓글
models.py


from posts.models import Post, Comment
Post.objects.all()
post = Post(title='제목입니다.', content='내용입니다.')
post.save()
Post.objects.all()

post = Post.objects.last()
post
c = Comment(post=post, content='댓글입니다!')
c.save()

Comment.objects.all()
post
post.comment_set.all()

c = Comment.objects.get(pk=1)
c

c.post
post.title
c.post.title
c.post.content
post.comment_set.first()
post.comment_set.first().content

댓글 창 만들기 detail.html

{% extends 'base.html' %}
{% block container %}
    <h1>
        Post Detail
    </h1>
    <img src="{{ post.image.url }}"></img>
    <h2>Title : {{ post.title }}</h2>
    <p>Content : {{ post.content }}</p>
    <a href="{% url 'posts:list' %}">List</a>
    <a href="{% url 'posts:edit' post.pk %}">Edit</a>
    <a href="{% url 'posts:delete' post.pk %}">Delete</a>
    
    <hr>
    
    <form action="{% url 'posts:comments_create' post.pk %}" method="post">
        {% csrf_token %}
        댓글 : <input type="text" name="content"/>
        <input type="submit" value="Submit"/>
    </form>
    
    <ul>
                <!-- 파이썬과 다르게 all뒤에 ()를 사용하지 않는다 -->
        {% for comment in post.comment_set.all %}
            <li> {{ comment.content }} - <a href="{% url 'posts:comments_delete' post.pk comment.pk %}">Delete</a> </li>
        {% endfor %}
    </ul>
    
{% endblock %}
