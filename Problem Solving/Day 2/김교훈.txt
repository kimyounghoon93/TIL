## 1. view
for case in range(0,10):
    answer=0
    all_i = int(input())
    garo = list(map(int,(input().split())))
    what=[]
    for i in range(0,all_i):
        if i<2:
            continue
        if i>(all_i-1)-2:
            continue
        near=[garo[i-2],garo[i-1],garo[i+1],garo[i+2]]
        max_near = max(near)
        saedai = garo[i]-max_near
        if saedai<0:
            saedai=0
        answer = answer+saedai
    print(f'#{case+1} {answer}')

## 2. 평탄화
for t in range(1,11):
    n = int(input())
    boxes = list(map(int,input().split()))
    floor_checker=[0]*101
 
    for i in range(0,100):
        floor_checker[boxes[i]]=floor_checker[boxes[i]]+1
 
    ptr_begin=1
    ptr_end=100
    for nn in range(0,n):
        while(floor_checker[ptr_begin]==0):
            ptr_begin = ptr_begin+1
        while(floor_checker[ptr_end]==0):
            ptr_end=ptr_end-1
         
        floor_checker[ptr_begin]=floor_checker[ptr_begin]-1 ## 쌓임
        floor_checker[ptr_begin+1]=floor_checker[ptr_begin+1]+1
        if(floor_checker[ptr_begin]==0):
            ptr_begin=ptr_begin+1
 
        floor_checker[ptr_end]=floor_checker[ptr_end]-1 ## 깎임
        floor_checker[ptr_end-1]=floor_checker[ptr_end-1]+1
        if(floor_checker[ptr_end]==0):
            ptr_end=ptr_end-1
 
    answer=ptr_end-ptr_begin
    print(f"#{t} {answer}")

## 3. minmax
T = int(input())
for t in range(1,T+1):
    N = int(input())
    A=list(map(int, input().split()))
    maxx=max(A)
    minn=min(A)
    answer = maxx-minn
    print (f"#{t} {answer}")

## 4. 숫자카드
T = int(input())
for t in range(1,T+1):
    N = int(input())

    A=[]
    data = input()
    for i in range(0,N):
        A.append(int(data[i]))

    checker=[0]*101
    for a in A:
        checker[a]=checker[a]+1
    
    answer_card=checker.index(max(checker))
    answer_card_num=max(checker)


    
    if (checker.count(max(checker))>1):
        for x in range(0,101):
            if (checker[x] == max(checker)):
                answer_card = x

    print (f"#{t} {answer_card} {answer_card_num}")

## 5. 구간합
T= int(input())
for t in range(1,T+1):
    inn = list(map(int,input().split()))
    data = list(map(int,input().split()))
    N = inn[0]
    M = inn[1]
    A=[]


    for i in range(M-1,N):
        sum_part =0
        for j in range(0,M):
            sum_part=sum_part + data[i-j]

        A.append(sum_part) #부분 합

    answer =  max(A)-min(A)
    print(f"#{t} {answer}")

## 6. 전기 버스
    # K=3 N=10 M=5

    #M_index
    # 1 3 5 7 9
T=int(input())

for t in range(1,T+1):
    dataset1=list(map(int,input().split()))
    K=dataset1[0]
    N=dataset1[1]
    M=dataset1[2]

    dataset2=list(map(int,input().split()))
    charger=[0]*(N+1)
    for d in dataset2:
        charger[d]=1

    charger_use=0
    NOW=0
    saved_area=0
    bus_state=K
    iwant_charge=0

    returned=0
    returned_pos=0
    while(1):
        if(NOW==N): # 도착지면 정지
            break

        if(iwant_charge==0): # 연료 충전할 필요 없다면 고대로 전진 
            bus_state=bus_state-1
            NOW=NOW+1

        if(charger[NOW]==1):#충전소가 있는 정류장
            saved_area=NOW #일단 여기서 정지
            if(saved_area!=returned_pos): # 이곳이 돌아갔던 지점을 지난 세이브 포인트라면
                returned=0 # 돌아간 횟수 초기화

            if(iwant_charge==1):#여기서 충전해야한다?
                bus_state=K
                iwant_charge=0
                charger_use=charger_use+1

        if(bus_state==0):
            if(charger[NOW]==1):#지금 멈춘 위치에 충전소가 있는가?
                saved_area=NOW
                bus_state=K
                charger_use=charger_use+1
                
            else: # 도착지도 아니고 충전소가 있지도 않다
                if(NOW==N):
                    break
                if(returned==1): # 저번에 돌아갔었는데 새 세이브 포인트에 못걸치고 또 와버렸음
                    charger_use=0 # 더는 못감
                    break
                returned_pos=saved_area #문제의 위치를 저장
                returned=1 # 돌아갔다 체크

                NOW = saved_area # 돌아간다
                iwant_charge=1 # 나는 연료가 필요하다
            

    print(f"#{t} {charger_use}")
